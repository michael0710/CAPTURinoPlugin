# NOTE: action must be started from the tag to be used for the release
on:
  workflow_dispatch:

#on:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Build Upload Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: get tag string
        id: get-tag
        uses: actions/github-script@0.9.0
        with:
          tag_name: ${{ github.ref }}
          script: |
                const tagName = core.getInput('tag_name', { required: true });
                const tag = tagName.replace('refs/tags/', '');
                core.setOutput('tag', tag)
      - name: Configure CMake for Ubuntu
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release
      - name: Build Ubuntu Binary
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config Release
      - name: Test Ubuntu Binary
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C Release
      - name: tar.gz Ubuntu Binary
        run: tar -czf CAPTURinoPlugin_ubuntu_${{steps.get-tag.outputs.tag}}.tar.gz build/CapturinoPlugin
  #######################
  # TODO
  # use mingw to build the binary for windows 64-bit
  # upload that artifact as 
  # name: CAPTURinoPlugin win64 ${{ github.ref }}
  #######################
  #    - name: zip Windows Binary
  #      run: zip CAPTURinoPlugin_win64_${{steps.get-tag.outputs.tag}}.zip build/CapturinoPlugin 

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          # TODO: get the release notes from a CHANGELOG.md file automatically from the file in the specified tag
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: true

      - name: Upload Ubuntu Release Assets
        id: upload-ubuntu-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: CAPTURinoPlugin_ubuntu_${{steps.get-tag.outputs.tag}}.tar.gz
          asset_name: CAPTURinoPlugin_ubuntu_${{steps.get-tag.outputs.tag}}.tar.gz
          asset_content_type: application/gzip
          
#      - name: Upload Windows Release Assets
#        id: upload-windows-release-asset 
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#          asset_path: CAPTURinoPlugin_win64_${{steps.get-tag.outputs.tag}}.zip
#          asset_name: CAPTURinoPlugin_win64_${{steps.get-tag.outputs.tag}}.zip
#          asset_content_type: application/zip
